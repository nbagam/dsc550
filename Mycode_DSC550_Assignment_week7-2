{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3ecc9f1b",
   "metadata": {},
   "source": [
    "# Week-7 Assignment 7.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "92e9c2b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from numpy import array\n",
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from sklearn.metrics._plot.confusion_matrix import plot_confusion_matrix\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn import tree\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb23c65",
   "metadata": {},
   "source": [
    "# 1.Import the data as a data frame and ensure it is loaded correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4628354a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read house price train data csv file \n",
    "df_mushrooms_data=pd.read_csv('mushrooms.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6364a095",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8124, 23)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mushrooms_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "440a5bb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class                       object\n",
       "cap-shape                   object\n",
       "cap-surface                 object\n",
       "cap-color                   object\n",
       "bruises                     object\n",
       "odor                        object\n",
       "gill-attachment             object\n",
       "gill-spacing                object\n",
       "gill-size                   object\n",
       "gill-color                  object\n",
       "stalk-shape                 object\n",
       "stalk-root                  object\n",
       "stalk-surface-above-ring    object\n",
       "stalk-surface-below-ring    object\n",
       "stalk-color-above-ring      object\n",
       "stalk-color-below-ring      object\n",
       "veil-type                   object\n",
       "veil-color                  object\n",
       "ring-number                 object\n",
       "ring-type                   object\n",
       "spore-print-color           object\n",
       "population                  object\n",
       "habitat                     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mushrooms_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa8ef852",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>bruises</th>\n",
       "      <th>odor</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-size</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>...</th>\n",
       "      <th>stalk-surface-below-ring</th>\n",
       "      <th>stalk-color-above-ring</th>\n",
       "      <th>stalk-color-below-ring</th>\n",
       "      <th>veil-type</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>ring-number</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>population</th>\n",
       "      <th>habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>p</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>n</td>\n",
       "      <td>t</td>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>e</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>y</td>\n",
       "      <td>t</td>\n",
       "      <td>a</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>e</td>\n",
       "      <td>b</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>l</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>p</td>\n",
       "      <td>x</td>\n",
       "      <td>y</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>e</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>g</td>\n",
       "      <td>f</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>w</td>\n",
       "      <td>b</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>a</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  class cap-shape cap-surface cap-color bruises odor gill-attachment  \\\n",
       "0     p         x           s         n       t    p               f   \n",
       "1     e         x           s         y       t    a               f   \n",
       "2     e         b           s         w       t    l               f   \n",
       "3     p         x           y         w       t    p               f   \n",
       "4     e         x           s         g       f    n               f   \n",
       "\n",
       "  gill-spacing gill-size gill-color  ... stalk-surface-below-ring  \\\n",
       "0            c         n          k  ...                        s   \n",
       "1            c         b          k  ...                        s   \n",
       "2            c         b          n  ...                        s   \n",
       "3            c         n          n  ...                        s   \n",
       "4            w         b          k  ...                        s   \n",
       "\n",
       "  stalk-color-above-ring stalk-color-below-ring veil-type veil-color  \\\n",
       "0                      w                      w         p          w   \n",
       "1                      w                      w         p          w   \n",
       "2                      w                      w         p          w   \n",
       "3                      w                      w         p          w   \n",
       "4                      w                      w         p          w   \n",
       "\n",
       "  ring-number ring-type spore-print-color population habitat  \n",
       "0           o         p                 k          s       u  \n",
       "1           o         p                 n          n       g  \n",
       "2           o         p                 n          n       m  \n",
       "3           o         p                 k          s       u  \n",
       "4           o         e                 n          a       g  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mushrooms_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b683ada3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>bruises</th>\n",
       "      <th>odor</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-size</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>...</th>\n",
       "      <th>stalk-surface-below-ring</th>\n",
       "      <th>stalk-color-above-ring</th>\n",
       "      <th>stalk-color-below-ring</th>\n",
       "      <th>veil-type</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>ring-number</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>population</th>\n",
       "      <th>habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [class, cap-shape, cap-surface, cap-color, bruises, odor, gill-attachment, gill-spacing, gill-size, gill-color, stalk-shape, stalk-root, stalk-surface-above-ring, stalk-surface-below-ring, stalk-color-above-ring, stalk-color-below-ring, veil-type, veil-color, ring-number, ring-type, spore-print-color, population, habitat]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 23 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mushrooms_data[df_mushrooms_data.isnull().any(axis=1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e3c0d68",
   "metadata": {},
   "source": [
    "# 2.Convert the categorical features (all of them) to dummy variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f265a688",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_mushrooms_data = pd.get_dummies(df_mushrooms_data,drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c79a19f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8124, 96)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mushrooms_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dff83792",
   "metadata": {},
   "source": [
    "# 3.Split the data into a training and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "44736271",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8124 entries, 0 to 8123\n",
      "Data columns (total 95 columns):\n",
      " #   Column                      Non-Null Count  Dtype\n",
      "---  ------                      --------------  -----\n",
      " 0   cap-shape_c                 8124 non-null   uint8\n",
      " 1   cap-shape_f                 8124 non-null   uint8\n",
      " 2   cap-shape_k                 8124 non-null   uint8\n",
      " 3   cap-shape_s                 8124 non-null   uint8\n",
      " 4   cap-shape_x                 8124 non-null   uint8\n",
      " 5   cap-surface_g               8124 non-null   uint8\n",
      " 6   cap-surface_s               8124 non-null   uint8\n",
      " 7   cap-surface_y               8124 non-null   uint8\n",
      " 8   cap-color_c                 8124 non-null   uint8\n",
      " 9   cap-color_e                 8124 non-null   uint8\n",
      " 10  cap-color_g                 8124 non-null   uint8\n",
      " 11  cap-color_n                 8124 non-null   uint8\n",
      " 12  cap-color_p                 8124 non-null   uint8\n",
      " 13  cap-color_r                 8124 non-null   uint8\n",
      " 14  cap-color_u                 8124 non-null   uint8\n",
      " 15  cap-color_w                 8124 non-null   uint8\n",
      " 16  cap-color_y                 8124 non-null   uint8\n",
      " 17  bruises_t                   8124 non-null   uint8\n",
      " 18  odor_c                      8124 non-null   uint8\n",
      " 19  odor_f                      8124 non-null   uint8\n",
      " 20  odor_l                      8124 non-null   uint8\n",
      " 21  odor_m                      8124 non-null   uint8\n",
      " 22  odor_n                      8124 non-null   uint8\n",
      " 23  odor_p                      8124 non-null   uint8\n",
      " 24  odor_s                      8124 non-null   uint8\n",
      " 25  odor_y                      8124 non-null   uint8\n",
      " 26  gill-attachment_f           8124 non-null   uint8\n",
      " 27  gill-spacing_w              8124 non-null   uint8\n",
      " 28  gill-size_n                 8124 non-null   uint8\n",
      " 29  gill-color_e                8124 non-null   uint8\n",
      " 30  gill-color_g                8124 non-null   uint8\n",
      " 31  gill-color_h                8124 non-null   uint8\n",
      " 32  gill-color_k                8124 non-null   uint8\n",
      " 33  gill-color_n                8124 non-null   uint8\n",
      " 34  gill-color_o                8124 non-null   uint8\n",
      " 35  gill-color_p                8124 non-null   uint8\n",
      " 36  gill-color_r                8124 non-null   uint8\n",
      " 37  gill-color_u                8124 non-null   uint8\n",
      " 38  gill-color_w                8124 non-null   uint8\n",
      " 39  gill-color_y                8124 non-null   uint8\n",
      " 40  stalk-shape_t               8124 non-null   uint8\n",
      " 41  stalk-root_b                8124 non-null   uint8\n",
      " 42  stalk-root_c                8124 non-null   uint8\n",
      " 43  stalk-root_e                8124 non-null   uint8\n",
      " 44  stalk-root_r                8124 non-null   uint8\n",
      " 45  stalk-surface-above-ring_k  8124 non-null   uint8\n",
      " 46  stalk-surface-above-ring_s  8124 non-null   uint8\n",
      " 47  stalk-surface-above-ring_y  8124 non-null   uint8\n",
      " 48  stalk-surface-below-ring_k  8124 non-null   uint8\n",
      " 49  stalk-surface-below-ring_s  8124 non-null   uint8\n",
      " 50  stalk-surface-below-ring_y  8124 non-null   uint8\n",
      " 51  stalk-color-above-ring_c    8124 non-null   uint8\n",
      " 52  stalk-color-above-ring_e    8124 non-null   uint8\n",
      " 53  stalk-color-above-ring_g    8124 non-null   uint8\n",
      " 54  stalk-color-above-ring_n    8124 non-null   uint8\n",
      " 55  stalk-color-above-ring_o    8124 non-null   uint8\n",
      " 56  stalk-color-above-ring_p    8124 non-null   uint8\n",
      " 57  stalk-color-above-ring_w    8124 non-null   uint8\n",
      " 58  stalk-color-above-ring_y    8124 non-null   uint8\n",
      " 59  stalk-color-below-ring_c    8124 non-null   uint8\n",
      " 60  stalk-color-below-ring_e    8124 non-null   uint8\n",
      " 61  stalk-color-below-ring_g    8124 non-null   uint8\n",
      " 62  stalk-color-below-ring_n    8124 non-null   uint8\n",
      " 63  stalk-color-below-ring_o    8124 non-null   uint8\n",
      " 64  stalk-color-below-ring_p    8124 non-null   uint8\n",
      " 65  stalk-color-below-ring_w    8124 non-null   uint8\n",
      " 66  stalk-color-below-ring_y    8124 non-null   uint8\n",
      " 67  veil-color_o                8124 non-null   uint8\n",
      " 68  veil-color_w                8124 non-null   uint8\n",
      " 69  veil-color_y                8124 non-null   uint8\n",
      " 70  ring-number_o               8124 non-null   uint8\n",
      " 71  ring-number_t               8124 non-null   uint8\n",
      " 72  ring-type_f                 8124 non-null   uint8\n",
      " 73  ring-type_l                 8124 non-null   uint8\n",
      " 74  ring-type_n                 8124 non-null   uint8\n",
      " 75  ring-type_p                 8124 non-null   uint8\n",
      " 76  spore-print-color_h         8124 non-null   uint8\n",
      " 77  spore-print-color_k         8124 non-null   uint8\n",
      " 78  spore-print-color_n         8124 non-null   uint8\n",
      " 79  spore-print-color_o         8124 non-null   uint8\n",
      " 80  spore-print-color_r         8124 non-null   uint8\n",
      " 81  spore-print-color_u         8124 non-null   uint8\n",
      " 82  spore-print-color_w         8124 non-null   uint8\n",
      " 83  spore-print-color_y         8124 non-null   uint8\n",
      " 84  population_c                8124 non-null   uint8\n",
      " 85  population_n                8124 non-null   uint8\n",
      " 86  population_s                8124 non-null   uint8\n",
      " 87  population_v                8124 non-null   uint8\n",
      " 88  population_y                8124 non-null   uint8\n",
      " 89  habitat_g                   8124 non-null   uint8\n",
      " 90  habitat_l                   8124 non-null   uint8\n",
      " 91  habitat_m                   8124 non-null   uint8\n",
      " 92  habitat_p                   8124 non-null   uint8\n",
      " 93  habitat_u                   8124 non-null   uint8\n",
      " 94  habitat_w                   8124 non-null   uint8\n",
      "dtypes: uint8(95)\n",
      "memory usage: 753.8 KB\n",
      "<class 'pandas.core.series.Series'>\n",
      "RangeIndex: 8124 entries, 0 to 8123\n",
      "Series name: class_p\n",
      "Non-Null Count  Dtype\n",
      "--------------  -----\n",
      "8124 non-null   uint8\n",
      "dtypes: uint8(1)\n",
      "memory usage: 8.1 KB\n"
     ]
    }
   ],
   "source": [
    "# split the data int x(training data) and y (test)\n",
    "y = df_mushrooms_data['class_p']\n",
    "x = df_mushrooms_data.drop(['class_p'], axis=1)\n",
    "x.info()\n",
    "y.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "70a4c8f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77f268e2",
   "metadata": {},
   "source": [
    "# 4.Fit a decision tree classifier on the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2541f210",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Instantiate the model\n",
    "tr = DecisionTreeClassifier()\n",
    "tr.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4836761c",
   "metadata": {},
   "source": [
    "# 5.Report the accuracy and create a confusion matrix for the model prediction on the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c194690d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9678da48",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=tr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b7c2bfb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\nbaga\\anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x151000cfe50>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion matrix\n",
    "\n",
    "plot_confusion_matrix(tr,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b30cb21",
   "metadata": {},
   "source": [
    "# 6.Create a visualization of the decision tree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2e526d5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import plot_tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fe05cf32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plot_tree(tr);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d982596",
   "metadata": {},
   "source": [
    "# 7.Use a Ï‡2-statistic selector to pick the five best features for this data (see section 10.4 of the Machine Learning with Python Cookbook)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3f5de2a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import chi2, f_classif\n",
    "from sklearn.feature_selection import SelectKBest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1ad98446",
   "metadata": {},
   "outputs": [],
   "source": [
    "chi2_selector = SelectKBest(chi2,k=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dbc6c063",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_features_5 = chi2_selector.fit_transform(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "95c9b3c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6499, 5)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_features_5.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ccda99c",
   "metadata": {},
   "source": [
    "# 8.Which five features were selected in step 7? Hint: Use the get_support function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "60a47f8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_mask = np.array(chi2_selector.get_support())\n",
    "feature_names = np.array(X_train.columns.tolist())\n",
    "selected_features = list(feature_names[feature_mask])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "19dbbc52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['odor_f',\n",
       " 'odor_n',\n",
       " 'gill-size_n',\n",
       " 'stalk-surface-above-ring_k',\n",
       " 'stalk-surface-below-ring_k']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bcef0b7",
   "metadata": {},
   "source": [
    "# 9.Repeat steps 4 and 5 with the five best features selected in step 7."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d7bb6d4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_best_5=pd.DataFrame(df_mushrooms_data[['odor_f','odor_n','gill-size_n','stalk-surface-above-ring_k','stalk-surface-below-ring_k']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9e947dc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>odor_f</th>\n",
       "      <th>odor_n</th>\n",
       "      <th>gill-size_n</th>\n",
       "      <th>stalk-surface-above-ring_k</th>\n",
       "      <th>stalk-surface-below-ring_k</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8119</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8120</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8121</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8122</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8124 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      odor_f  odor_n  gill-size_n  stalk-surface-above-ring_k  \\\n",
       "0          0       0            1                           0   \n",
       "1          0       0            0                           0   \n",
       "2          0       0            0                           0   \n",
       "3          0       0            1                           0   \n",
       "4          0       1            0                           0   \n",
       "...      ...     ...          ...                         ...   \n",
       "8119       0       1            0                           0   \n",
       "8120       0       1            0                           0   \n",
       "8121       0       1            0                           0   \n",
       "8122       0       0            1                           0   \n",
       "8123       0       1            0                           0   \n",
       "\n",
       "      stalk-surface-below-ring_k  \n",
       "0                              0  \n",
       "1                              0  \n",
       "2                              0  \n",
       "3                              0  \n",
       "4                              0  \n",
       "...                          ...  \n",
       "8119                           0  \n",
       "8120                           0  \n",
       "8121                           0  \n",
       "8122                           1  \n",
       "8123                           0  \n",
       "\n",
       "[8124 rows x 5 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_best_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f470f038",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8124 entries, 0 to 8123\n",
      "Data columns (total 95 columns):\n",
      " #   Column                      Non-Null Count  Dtype\n",
      "---  ------                      --------------  -----\n",
      " 0   cap-shape_c                 8124 non-null   uint8\n",
      " 1   cap-shape_f                 8124 non-null   uint8\n",
      " 2   cap-shape_k                 8124 non-null   uint8\n",
      " 3   cap-shape_s                 8124 non-null   uint8\n",
      " 4   cap-shape_x                 8124 non-null   uint8\n",
      " 5   cap-surface_g               8124 non-null   uint8\n",
      " 6   cap-surface_s               8124 non-null   uint8\n",
      " 7   cap-surface_y               8124 non-null   uint8\n",
      " 8   cap-color_c                 8124 non-null   uint8\n",
      " 9   cap-color_e                 8124 non-null   uint8\n",
      " 10  cap-color_g                 8124 non-null   uint8\n",
      " 11  cap-color_n                 8124 non-null   uint8\n",
      " 12  cap-color_p                 8124 non-null   uint8\n",
      " 13  cap-color_r                 8124 non-null   uint8\n",
      " 14  cap-color_u                 8124 non-null   uint8\n",
      " 15  cap-color_w                 8124 non-null   uint8\n",
      " 16  cap-color_y                 8124 non-null   uint8\n",
      " 17  bruises_t                   8124 non-null   uint8\n",
      " 18  odor_c                      8124 non-null   uint8\n",
      " 19  odor_f                      8124 non-null   uint8\n",
      " 20  odor_l                      8124 non-null   uint8\n",
      " 21  odor_m                      8124 non-null   uint8\n",
      " 22  odor_n                      8124 non-null   uint8\n",
      " 23  odor_p                      8124 non-null   uint8\n",
      " 24  odor_s                      8124 non-null   uint8\n",
      " 25  odor_y                      8124 non-null   uint8\n",
      " 26  gill-attachment_f           8124 non-null   uint8\n",
      " 27  gill-spacing_w              8124 non-null   uint8\n",
      " 28  gill-size_n                 8124 non-null   uint8\n",
      " 29  gill-color_e                8124 non-null   uint8\n",
      " 30  gill-color_g                8124 non-null   uint8\n",
      " 31  gill-color_h                8124 non-null   uint8\n",
      " 32  gill-color_k                8124 non-null   uint8\n",
      " 33  gill-color_n                8124 non-null   uint8\n",
      " 34  gill-color_o                8124 non-null   uint8\n",
      " 35  gill-color_p                8124 non-null   uint8\n",
      " 36  gill-color_r                8124 non-null   uint8\n",
      " 37  gill-color_u                8124 non-null   uint8\n",
      " 38  gill-color_w                8124 non-null   uint8\n",
      " 39  gill-color_y                8124 non-null   uint8\n",
      " 40  stalk-shape_t               8124 non-null   uint8\n",
      " 41  stalk-root_b                8124 non-null   uint8\n",
      " 42  stalk-root_c                8124 non-null   uint8\n",
      " 43  stalk-root_e                8124 non-null   uint8\n",
      " 44  stalk-root_r                8124 non-null   uint8\n",
      " 45  stalk-surface-above-ring_k  8124 non-null   uint8\n",
      " 46  stalk-surface-above-ring_s  8124 non-null   uint8\n",
      " 47  stalk-surface-above-ring_y  8124 non-null   uint8\n",
      " 48  stalk-surface-below-ring_k  8124 non-null   uint8\n",
      " 49  stalk-surface-below-ring_s  8124 non-null   uint8\n",
      " 50  stalk-surface-below-ring_y  8124 non-null   uint8\n",
      " 51  stalk-color-above-ring_c    8124 non-null   uint8\n",
      " 52  stalk-color-above-ring_e    8124 non-null   uint8\n",
      " 53  stalk-color-above-ring_g    8124 non-null   uint8\n",
      " 54  stalk-color-above-ring_n    8124 non-null   uint8\n",
      " 55  stalk-color-above-ring_o    8124 non-null   uint8\n",
      " 56  stalk-color-above-ring_p    8124 non-null   uint8\n",
      " 57  stalk-color-above-ring_w    8124 non-null   uint8\n",
      " 58  stalk-color-above-ring_y    8124 non-null   uint8\n",
      " 59  stalk-color-below-ring_c    8124 non-null   uint8\n",
      " 60  stalk-color-below-ring_e    8124 non-null   uint8\n",
      " 61  stalk-color-below-ring_g    8124 non-null   uint8\n",
      " 62  stalk-color-below-ring_n    8124 non-null   uint8\n",
      " 63  stalk-color-below-ring_o    8124 non-null   uint8\n",
      " 64  stalk-color-below-ring_p    8124 non-null   uint8\n",
      " 65  stalk-color-below-ring_w    8124 non-null   uint8\n",
      " 66  stalk-color-below-ring_y    8124 non-null   uint8\n",
      " 67  veil-color_o                8124 non-null   uint8\n",
      " 68  veil-color_w                8124 non-null   uint8\n",
      " 69  veil-color_y                8124 non-null   uint8\n",
      " 70  ring-number_o               8124 non-null   uint8\n",
      " 71  ring-number_t               8124 non-null   uint8\n",
      " 72  ring-type_f                 8124 non-null   uint8\n",
      " 73  ring-type_l                 8124 non-null   uint8\n",
      " 74  ring-type_n                 8124 non-null   uint8\n",
      " 75  ring-type_p                 8124 non-null   uint8\n",
      " 76  spore-print-color_h         8124 non-null   uint8\n",
      " 77  spore-print-color_k         8124 non-null   uint8\n",
      " 78  spore-print-color_n         8124 non-null   uint8\n",
      " 79  spore-print-color_o         8124 non-null   uint8\n",
      " 80  spore-print-color_r         8124 non-null   uint8\n",
      " 81  spore-print-color_u         8124 non-null   uint8\n",
      " 82  spore-print-color_w         8124 non-null   uint8\n",
      " 83  spore-print-color_y         8124 non-null   uint8\n",
      " 84  population_c                8124 non-null   uint8\n",
      " 85  population_n                8124 non-null   uint8\n",
      " 86  population_s                8124 non-null   uint8\n",
      " 87  population_v                8124 non-null   uint8\n",
      " 88  population_y                8124 non-null   uint8\n",
      " 89  habitat_g                   8124 non-null   uint8\n",
      " 90  habitat_l                   8124 non-null   uint8\n",
      " 91  habitat_m                   8124 non-null   uint8\n",
      " 92  habitat_p                   8124 non-null   uint8\n",
      " 93  habitat_u                   8124 non-null   uint8\n",
      " 94  habitat_w                   8124 non-null   uint8\n",
      "dtypes: uint8(95)\n",
      "memory usage: 753.8 KB\n",
      "<class 'pandas.core.series.Series'>\n",
      "RangeIndex: 8124 entries, 0 to 8123\n",
      "Series name: class_p\n",
      "Non-Null Count  Dtype\n",
      "--------------  -----\n",
      "8124 non-null   uint8\n",
      "dtypes: uint8(1)\n",
      "memory usage: 8.1 KB\n"
     ]
    }
   ],
   "source": [
    "y1 = df_mushrooms_data['class_p']\n",
    "x1 = df_best_5\n",
    "x.info()\n",
    "y.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4c9d16b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data and target to training and test set\n",
    "X1_train, X1_test, y1_train, y1_test = train_test_split(x1, y1, test_size=0.20, random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f37c5650",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Instantiate the model\n",
    "tr1 = DecisionTreeClassifier()\n",
    "tr1.fit(X1_train, y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "84911180",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9778461538461538"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr1.score(X1_test,y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d7f5acf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\nbaga\\anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x15104944100>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(tr1,X1_test,y1_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ee8489b",
   "metadata": {},
   "source": [
    "# 10.Summarize your findings.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45b80863",
   "metadata": {},
   "source": [
    "From the above it is clear that using all features achived to 100% classification,but \n",
    "even after using limited features the model achived to a 97% accuracy, so it is \n",
    "important to practice of choosing a subset of relevant features (predictors and variables)\n",
    "for use in a model construction to improve the model performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8a5aedc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
